apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'

defaultTasks 'clean', 'build'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

project.ext {

    //libs
    groovy = 'org.codehaus.groovy:groovy-all:2.0.5'
    commonsCli = 'commons-cli:commons-cli:1.1'
    log4j = 'log4j:log4j:1.2.17'
    websocket = 'org.java-websocket:Java-WebSocket:1.3.0'
    unmanagedLibDir = "$projectDir/lib"

    //test-libs
    junit = 'junit:junit:4.8.1'
    hamcrest = 'org.hamcrest:hamcrest-all:1.3'
    spock = 'org.spockframework:spock-core:0.7-groovy-2.0'

    //Distribution settings
    distsTemplateDir = 'distribution-template'
    distsBinDir = "$distsDir/bin"

}

repositories {
    mavenCentral()
    maven {
        url 'http://code.google.com/p/google-maven-repository'
    }
}


dependencies {
    compile(project.ext.groovy, project.ext.commonsCli, project.ext.log4j, project.ext.websocket)
    compile fileTree (dir: "${project.ext.unmanagedLibDir}", includes: ['*.jar'])
    testCompile(project.ext.hamcrest, project.ext.junit, project.ext.spock)
}

jar {
//    manifest {
//        attributes.putAll(project.ext.manifest)
//    }

    doLast {
        copy {
            from (configurations.compile.asPath.split(File.pathSeparator))
            into "$libsDir"
        }
    }
}

def prepareExecutables() {
    def allLibFiles = new File("$libsDir").list().collect { "libs/$it" }
    new File("$distsTemplateDir").list().each { filename ->
        if(filename.startsWith('client') || filename.startsWith('server')) {
            def contents = new File("$distsTemplateDir/$filename").text
            new FileWriter("$distsBinDir/$filename").withWriter { writer ->
                if(filename.endsWith('.sh')) {
                    writer.append contents.replace('%%JAVA_CLASS_PATH%%', allLibFiles.collect({"\$STREAMING_HOME/$it"}).join(":"))
                }
                if(filename.endsWith('.bat')) {
                    writer.append contents.replace('%%JAVA_CLASS_PATH%%', allLibFiles.collect({"%STREAMING_HOME%/$it"}).join(";"))
                }
            }
        }
    }
}


task distribute(type:Zip, dependsOn: [assemble]) {
    doFirst {
        ant.mkdir(dir:"$distsBinDir")
        prepareExecutables()
    }
    from project.ext.distsBinDir
    from ("$libsDir") { into ('libs') }
}


build.dependsOn = ['distribute']